# Architecture specific optimization flags
#   PowerPC: use optimization -mcpu=native for architecture specific compilation
#   x86/ARM: use optimization -march=native for architecture specific compilation
ifeq ($(CXXOPT),)
	CXXOPT=-ggdb -O2 -DNDEBUG=1
endif

ifeq ($(THISARCH), INTEL)
	CXXOPT+=-march=native
endif

ifeq ($(THISARCH), POWER8)
	CXXOPT+=-mcpu=native
endif


# Output directory
ifeq ($(COMPDIR),)
	COMPDIR=.
endif

ifeq ($(TEST_ALLOC),)
  TEST_ALLOC=TEST_EPOCH_MANAGER
  # TEST_NO_MANAGER TEST_EPOCH_MANAGER TEST_PUB_SCAN_MANAGER TEST_GC_MANAGER TEST_REF_COUNTER
endif

ifeq ($(TEST_CONTAINER),)
  TEST_CONTAINER=TEST_LOCKING_SKIPLIST
endif

# libraries
INCDIR=
LIBS=

SOURCE=parSkipListUniqueElems.cc
TARGET=skiplist.bin
INCLUDE=../include
DEFINES=-D$(TEST_ALLOC)=1

DEFINES+= -D$(TEST_CONTAINER)=1
CXXFLAGS=-std=c++11 -Wall -Wextra -pedantic -pthread

ifeq ($(TEST_ALLOC),TEST_GC_MANAGER)
  ifneq ($(GC_HOME),)
    INCDIR+=-I$(GC_HOME)/include
    LIBS+=-L$(GC_HOME)/lib
  endif

  LIBS+=-lgc # disable when compiling w/o garbage collector=
else
  DEFINES+= -DWITHOUT_GC=1
endif

# LIBS+=-latomic # needed on some architectures

.PHONY: test clean

test: $(COMPDIR)/$(TARGET)

$(COMPDIR)/$(TARGET): $(SOURCE) $(INCLUDE)/pmemory.hpp $(INCLUDE)/skiplist.hpp $(INCLUDE)/atomicutil.hpp Makefile.skiplist
	$(CXX) $(CXXOPT) $(CXXFLAGS) $(TXFLAGS) $(DEFINES) -I$(INCLUDE) $(INCDIR) $< $(LIBS) -o $@

clean:
	rm -f $(COMPDIR)/*.o $(COMPDIR)/*.bin $(TARGET)
